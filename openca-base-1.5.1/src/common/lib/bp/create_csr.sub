## OpenCA - batch function
## Written by Michael Bell for the OpenCA project
## (c) Copyright 1998-2004 The OpenCA Project
##
##   File Name: create_csr.sub
##     Version: $Revision: 1.1.1.1 $
##       Brief: create a new csr
## Description: 

use strict;

sub workflow_create_csr
{
    ## general global stuff
    our $state_machine;
    our ($db, $tools, $xml_cache, $cryptoShell, $bp_token);

    ## global logging system
    our $log;
    my $journal = undef;

    my $keys     = { @_ };
    my $user     = $keys->{USER};
    my $workflow = $keys->{WORKFLOW};
    my $home = $state_machine->get_workflow_path($user, $workflow);

    ## initialize new log message
    $journal->{CLASS}    = "batch_system";
    $journal->{LEVEL}    = "info";
    $journal->{message}  = "";
    $journal->{function} = "create_csr";
    $journal->{user}     = $user;
    $journal->{workflow} = $workflow;

    ## the token of the batch system must be activated

    if (not $bp_token or not $bp_token->keyOnline)
    {
        my $msg = gettext ("The crypto token of the batch system was not activated.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -105, $msg ];
    }

    ## is there a pin ?

    if (not -f $home."/private/purePIN")
    {
        my $msg = gettext ("There is no usable PIN.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -120, $msg ];
    }

    ## load PIN

    if (not -f $home."/private/purePIN")
    {
        my $msg = gettext ("There is no PIN file which could be used to create the new key.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -130, $msg ];
    }
    my $pin = $bp_token->decrypt (
                  INFILE     => $home."/private/purePIN",
                                  );
    if (not $pin) {
        my $msg = gettext ("The PIN file cannot be decrypted.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -140, $msg ];
    }

    ## load subject
    my $subject = $tools->getFile ($home."/data/SUBJECT");
    if (not $subject) {
        my $msg = gettext ("The subject of the request cannot be loaded.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -150, $msg ];
    }

    ## generate request
    my $csr = new OpenCA::REQ (
                      SHELL   => $cryptoShell,
                      GETTEXT => \&i18nGettext,
                      KEYFILE => $home."/private/privateKey",
                      SUBJECT => $subject,
                      PASSWD  => $pin,
                      FORMAT  => "PEM");
    if (not $csr) {
        my $msg = i18nGettext ("The request cannot be created (__ERRNO__). __ERRVAL__",
                               "__ERRNO__", $OpenCA::REQ::errno,
                               "__ERRVAL__", $OpenCA::REQ::errval);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -160, $msg ];
    }

    ## compose minimal request
    my $tmp = "-----BEGIN HEADER-----\n";
    $tmp .= "TYPE = PKCS#10\n";
    my $last_req = libDBGetLastItem ("REQUEST");
    my $req_elements = 0;
    $req_elements    = $last_req->getSerial("REQUEST") if ($last_req);
    $req_elements  >>= getRequired ("ModuleShift");
    if ((not defined $req_elements) or ($req_elements < 0)) {
        my $msg = i18nGettext ("The database failed during counting the existing requests (__ERRNO__). __ERRVAL__",
                               "__ERRNO__", $db->errno,
                               "__ERRVAL__", $db->errval);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -170, $msg ];
    } else {
        $req_elements++;
    }
    my $new_serial = ($req_elements << getRequired ("ModuleShift")) | getRequired ("ModuleID");
    $tmp .= "SERIAL = ".$new_serial."\n";
    $tmp .= "NOTBEFORE = " . $tools->getDate() . "\n";
    $tmp .= "SUBJECT = ".$subject."\n";
    $tmp .= "-----END HEADER-----\n";
    $tmp .= $csr->getPEM();

    ## setup new request object
    my $new_req;
    if( not $new_req = new OpenCA::REQ( SHELL   => $cryptoShell,
                                        GETTEXT => \&i18nGettext,
                                        DATA    => $tmp) ) {
        my $msg = i18nGettext ("The minimal request cannot be created (__ERRNO__). __ERRVAL__",
                               "__ERRNO__", $OpenCA::REQ::errno,
                               "__ERRVAL__", $OpenCA::REQ::errval);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -180, $msg ];
    }

    ## store the new request
    if( not $db->storeItem( 
                     DATATYPE => "NEW_REQUEST",
                     OBJECT   => $new_req,
                     INFORM   => "PEM",
                     MODE     => "INSERT" )) {
        my $msg = i18nGettext ("The database failed during storing the new request (__ERRNO__). __ERRVAL__",
                               "__ERRNO__", $db->errno,
                               "__ERRVAL__", $db->errval);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -190, $msg ];
    }

    ##// store request's serial in newCSR
    $tools->saveFile (FILENAME => $home."/public/csrList",
                      DATA     => $new_req->getSerial()."\n".$tools->getFile ($home."/public/csrList"));

    ## get a hash from the key
    my $digest = $cryptoShell->getDigest (
                     DATA      => $tools->getFile ($home."/private/privateKey"),
                     ALGORITHM => "sha1");

    ##// save the key's digest in a file associated with the request
    my $filename = $home."/keybackup/csr_".$new_req->getSerial().".keydigest";
    if (not $tools->saveFile (FILENAME => $filename, DATA => $digest)) {
        my $msg = i18nGettext ("Cannot write the keydigest to file __FILE__.",
                               "__FILE__", $filename);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -200, $msg ];
    }

    $journal->{message} .= gettext ("New request created.");

    ## set the new state

    if (not $state_machine->set_user_states (
                                "USER"    => $user,
                                "PROCESS" => $workflow,
                                "SET"     => [ "new_csr" ],
                                "UNSET"   => [ "checked_csr_params" ]))
    {
        my $msg = i18nGettext ( 
                      "Cannot set new state configuration (__ERRNO__).",
                      "__ERRNO__", $state_machine->errno).
                  $state_machine->errval;
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -210, $msg ];
    }
    $journal->{message} .= gettext ("State configuration was changed.");

    ## log the complete stuff
    $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));

    ## finished
    return [ 0, gettext ("New request created.") ];
}

1;
