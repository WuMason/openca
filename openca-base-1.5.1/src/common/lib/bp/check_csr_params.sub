## OpenCA - batch function
## Written by Michael Bell for the OpenCA project
## (c) Copyright 1998-2004 The OpenCA Project
##
##   File Name: check_csr_params.sub
##     Version: $Revision: 1.1.1.1 $
##       Brief: check the parameters for a request before creating one
## Description: 

use strict;

sub workflow_check_csr_params
{
    ## general global stuff
    our $state_machine;
    our ($db, $tools, $xml_cache, $cryptoShell);

    ## global logging system
    our $log;
    my $journal = undef;

    my $keys     = { @_ };
    my $user     = $keys->{USER};
    my $workflow = $keys->{WORKFLOW};
    my $home = $state_machine->get_workflow_path($user, $workflow);

    ## initialize new log message
    $journal->{CLASS}    = "batch_system";
    $journal->{LEVEL}    = "info";
    $journal->{message}  = "";
    $journal->{function} = "check_csr";
    $journal->{user}     = $user;
    $journal->{workflow} = $workflow;

    ###########################################
    ##      check all necessary params       ##
    ###########################################

    ## parameters are:
    ##   * PIN (must be present)
    ##   * KEY (must be present)
    ##   * ROLE (must be allowed)
    ##   * suffix of SUBJECT
    ##   * SUBJECT_ALT_NAME (must be present)

    ## PIN

    if (not -f $home."/private/purePIN")
    {
        my $msg = gettext ("There is no PIN for the private key.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -110, $msg ];
    }

    ## KEY

    if (not -f $home."/private/privateKey")
    {
        my $msg = gettext ("There is no private key.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -120, $msg ];
    }

    ## ROLE

    my $role = $tools->getFile ($home."/data/ROLE");
    if (not $role)
    {
        my $msg = gettext ("There is no role specified for the workflow.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -130, $msg ];
    }
    my $roles =  undef;
    my $role_ok = 0;
    my $count = $xml_cache->get_xpath_count (
           FILENAME => getRequired ('StateMachineConfiguration'),
           XPATH    => [ "statemachine/functions/create_csr/allowed_roles/role" ]);
    if (not $count)
    {
        my $msg = gettext ("There are no roles specified for the batch system.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -133, $msg ];
    }
    if ($count !~ /^[1-9][0-9]*$/)
    {
        ## there is only one role
        ## --> this is the value and not the number
        $count = 1;
    }
    for (my $k=0; $k<$count; $k++)
    {
        my $help = $xml_cache->get_xpath (
                        FILENAME => getRequired ('StateMachineConfiguration'),
                        XPATH    => [ "statemachine/functions/create_csr/allowed_roles/role" ],
                        COUNTER  => [ $k ]);
        $roles->{$help} = 1;
    }
    foreach my $item (keys %{$roles})
    {
        $role_ok = 1
          if ($role eq $item);
    }
    if (not $role_ok)
    {
        my $msg = i18nGettext ("The requested role (__ROLE__) is not allowed for the batch system.",
                           "__ROLE__", $role);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -140, $msg ];
    }

    ## SUBJECT

    my $subject = $tools->getFile ($home."/data/SUBJECT");
    if (not $subject)
    {
        my $msg = gettext ("There is no subject specified for the workflow.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -150, $msg ];
    }
    my $suffixes =  undef;
    my $subject_suffix_ok = 0;
    my $count = $xml_cache->get_xpath_count (
           FILENAME => getRequired ('StateMachineConfiguration'),
           XPATH    => [ "statemachine/functions/create_csr/allowed_subjects/suffix" ]);
    if (not defined $count)
    {
        my $msg = gettext ("There are no subject suffixes specified for the batch system.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -153, $msg ];
    }
    if ($count !~ /^[1-9][0-9]*$/)
    {
        ## there is only one role
        ## --> this is the value and not the number
        $count = 1;
    }
    for (my $k=0; $k<$count; $k++)
    {
        my $help = $xml_cache->get_xpath (
                        FILENAME => getRequired ('StateMachineConfiguration'),
                        XPATH    => [ "statemachine/functions/create_csr/allowed_subjects/suffix" ],
                        COUNTER  => [ $k ]);
        $suffixes->{$help} = 1;
    }
    foreach my $suffix (keys %{$suffixes})
    {
        $subject_suffix_ok = 1
          if ($subject =~ /^.*${suffix}$/);
    }
    if (not $subject_suffix_ok)
    {
        my $msg = i18nGettext ("The suffix of the subject (__SUBJECT__) is not allowed for the batch system.",
                           "__SUBJECT__", $subject);
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -160, $msg ];
    }

    ## SUBJECT ALTERNATIVE NAME

    if (not opendir (DIR, $home."/data"))
    {
        my $msg = gettext ("Cannot open data directory.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -170, $msg ];
    }
    my @list = readdir DIR;
    closedir DIR;
    if (not scalar @list)
    {
        my $msg = gettext ("The directory listing of the data directory cannot be loaded.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -175, $msg ];
    }
    @list = grep /^SUBJECT_ALT_NAME_/, @list;
    if (not scalar @list)
    {
        my $msg = gettext ("The data directory contains no SUBJECT_ALT_NAME specifications.");
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -180, $msg ];
    }

    ##################
    ## change state ##
    ##################

    $journal->{message} .= gettext ("The parameters for the new request are accepted.");

    if (not $state_machine->set_user_states (
                                "USER"    => $user,
                                "PROCESS" => $workflow,
                                "SET"     => [ "checked_csr_params" ],
                                "UNSET"   => [ "backuped_key", "checked_key" ]))
    {
        my $msg = i18nGettext ( 
                      "Cannot set new state configuration (__ERRNO__).",
                      "__ERRNO__", $state_machine->errno).
                  $state_machine->errval;
        $journal->{message} .= $msg;
        $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));
        return [ -210, $msg ];
    }
    $journal->{message} .= gettext ("State configuration was changed.");

    ## log the complete stuff
    $log->addMessage (OpenCA::Log::Message->new (HASHREF => $journal));

    ## finished
    return [ 0, gettext ("The parameters for the new request are accepted.") ];
}

1;
